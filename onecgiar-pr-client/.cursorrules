# Angular 18+ Development Rules

## Core Principles

- Always use Angular 18+ features and syntax
- Prefer signals over traditional reactive patterns
- Use computed signals instead of getter methods
- Implement proper TypeScript typing
- Follow Angular's reactive patterns

## Signals Usage

- Use `signal()` for state management
- Use `computed()` for derived state instead of getter methods
- Use `effect()` for side effects
- Prefer signals over BehaviorSubject when possible

## Component Architecture

- Use standalone components by default
- Implement OnInit interface when using lifecycle hooks
- Use `inject()` function for dependency injection
- Use proper typing for all interfaces and signals

## Reactive Patterns

- Implement debounce for search inputs (2+ seconds)
- Use computed signals for filtering and data transformation
- Avoid manual subscriptions when signals can handle reactivity
- Use proper cleanup for subscriptions when necessary

## Performance

- Use `OnPush` change detection strategy when appropriate
- Implement proper signal-based reactivity
- Avoid unnecessary re-computations
- Use trackBy functions for \*ngFor loops

## Code Quality

- Remove console.log statements in production code
- Implement proper error handling
- Use meaningful variable and method names
- Follow Angular style guide conventions

## Modern Angular Features (v18+)

- Use zoneless change detection when possible
- Leverage new control flow syntax (@if, @for, @defer)
- Use Material 3 components when available
- Implement proper SSR and hydration support

## Icons

- Always use `material-icons-round` instead of `material-icons` for consistent rounded design
- Use primary app color (#3b82f6 or similar blue) for icons
- Implement opacity variations for different states (inactive, disabled, etc.)

## Communication and Problem-Solving Rules

### 🔍 ALWAYS INSPECT EXISTING CODE FIRST

- Before giving instructions, ALWAYS read the existing HTML/CSS structure
- Use `read_file` to understand current implementation
- Don't assume how things are organized - verify first
- Look for existing patterns and follow them

### 🏗️ EXPLAIN CODE STRUCTURE WITH ANALOGIES

- Use building/architecture analogies: "containers", "groups", "sections"
- Explain layout like furniture arrangement: "left side", "right side", "stacked"
- Compare CSS to organizing a room: "everything has its place"
- Example: "Think of flexbox like organizing books on shelves"

### 🤔 ASK BEFORE ASSUMING

- If structure is unclear, ask specific numbered questions
- Propose solutions with alternatives: "Option 1: X, Option 2: Y"
- When uncertain about approach, suggest: "Should I modify HTML structure or just CSS?"
- Always confirm understanding before major changes

### 🔄 AVOID ITERATION LOOPS

- If solution doesn't work after 2 attempts, step back and re-analyze
- Ask: "What am I missing about the current structure?"
- Consider: "Is there a simpler architectural approach?"
- Suggest: "Let me rethink this from scratch with a different approach"

### 💬 LANGUAGE AND COMMUNICATION

- **RESPOND IN THE SAME LANGUAGE THE USER WRITES**
- If user writes in Spanish, respond in Spanish
- If user writes in English, respond in English
- If mixed languages, follow the dominant language
- Maintain technical terms in their original language when appropriate

### 🎯 PROBLEM-SOLVING STRATEGY

1. **Understand first**: Read existing code structure
2. **Explain current state**: "I see you have X organized as Y"
3. **Propose solution**: "To achieve Z, we can modify A to become B"
4. **Confirm approach**: "Does this approach make sense for your needs?"
5. **Implement cleanly**: Remove old code, add new code clearly

### 🚫 ANTI-PATTERNS TO AVOID

- Don't layer multiple CSS rules that conflict
- Don't assume HTML structure without checking
- Don't iterate endlessly - rethink approach
- Don't ignore user's language preference
- Don't give solutions without understanding the problem context

### ✅ BEST PRACTICES

- Use analogies to explain complex layouts
- Break down problems into simple steps
- Always verify understanding before implementing
- Clean up conflicting rules completely
- Respond in user's preferred language

## Testing Rules (Jest Framework)

### 🧪 JEST TESTING REQUIREMENTS

**CRITICAL**: This project uses **Jest**, NOT Jasmine

1. **Always use Jest syntax**:
   - `jest.fn()` instead of `jasmine.createSpy()`
   - `jest.spyOn()` instead of `spyOn()`
   - `jest.mock()` for mocking modules
   - `.mockReturnValue()` instead of `.and.returnValue()`

2. **Test Assumptions for Frontend Changes**:
   - **ALWAYS assume tests are missing** when making frontend changes
   - **ALWAYS check and update existing tests** when modifying components
   - **ALWAYS create new tests** for new functionality
   - **NEVER ignore failing tests** - fix them immediately

3. **Test Standards**:
   - All new components MUST have unit tests
   - All new methods MUST be tested
   - All user interactions MUST be tested
   - All error scenarios MUST be tested
   - Use `HttpClientTestingModule` for HTTP dependencies
   - Mock external services properly

4. **Test Execution**:
   - **FOR SPECIFIC TESTS**: Run tests directly by file path: `npm test src/path/to/component.spec.ts`
   - **AVOID** using `--testPathPattern` for specific tests to prevent running all tests and overloading the system
   - **ONLY** use `--testPathPattern` when absolutely necessary for pattern-based filtering
   - Ensure all tests pass before committing
   - Fix any failing tests immediately
   - Don't skip or ignore broken tests

5. **Test Structure Example**:
   ```typescript
   describe('ComponentName', () => {
     let component: ComponentName;
     let mockService: any;

     beforeEach(() => {
       mockService = {
         method: jest.fn().mockReturnValue(of({}))
       };
     });

     it('should test behavior', () => {
       jest.spyOn(component.output, 'emit');
       // test logic
       expect(component.output.emit).toHaveBeenCalledWith(value);
     });
   });
   ```

## Git Commit Rules

### 📝 CREATE COMMIT COMMAND

When user says "create commit":

1. **NEVER modify any files** - Only commit existing changes
2. **Check pending changes** with `git status` and `git diff`
3. **Analyze changes** to understand what was modified
4. **Create semantic commit message** following project patterns:
   - `✨` for new features/functionality
   - `♻️` for refactoring/improvements/adjustments
   - `🐛` for bug fixes
   - `📝` for documentation
   - `🎨` for UI/styling changes
   - `🔧` for configuration changes
   - `🚀` for performance improvements
   - `🧪` for tests

5. **Message format**: `[emoji] [Action] [component/area] [description]`
   - Example: `✨ Add user management modal with CGIAR selection`
   - Example: `♻️ Improve search functionality with debounce`
   - Example: `🐛 Fix form validation in user creation`

6. **Execute commit and push**:
   ```bash
   git add .
   git commit -m "[generated message]"
   git push
   ```

**IMPORTANT**: This command is ONLY for committing existing changes, never for making new modifications.
